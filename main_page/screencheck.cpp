#include "screencheck.h"
#include "ui_screencheck.h"
#include "DefectsDetect.h"


const unsigned char chCRCHTalbe[] =
{
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,// CRC 高位字节值表
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40
};

const unsigned char chCRCLTalbe[] =
{
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,// CRC 低位字节值表
0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
0x41, 0x81, 0x80, 0x40
};

unsigned short int CRC16(unsigned char *pchMsg, unsigned short int wDataLen)
{
    unsigned char chCRCHi = 0xFF;
    unsigned char chCRCLo = 0xFF;
    short wIndex;

       while (wDataLen--)
       {
           // 计算CRC
           wIndex = chCRCLo ^ *pchMsg++ ;
           chCRCLo = chCRCHi ^ chCRCHTalbe[wIndex];
           chCRCHi = chCRCLTalbe[wIndex] ;
       }

       return ((chCRCHi << 8) | chCRCLo) ;
}



ScreenCheck::ScreenCheck(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::ScreenCheck)
{
    ui->setupUi(this);
    this->ui->image->hide();
}

ScreenCheck::~ScreenCheck()
{
    delete ui;
}

void ScreenCheck::on_pushButton_released()
{
    emit tell_window_start_check();
}


void ScreenCheck::addlabel(const QString &name, const QString &content)
{
    this->object_label_map[name] = new Label(this);
    this->object_label_map[name]->setText(content);
    this->ui->verticalLayout_4->addWidget(this->object_label_map[name]);
}

void ScreenCheck::start_check()
{
   this->ui->stackedWidget->setCurrentIndex(1);
   //this->ui->label_8->hide();
}


void ScreenCheck::on_pushButton_4_released()
{
    emit tell_window_step_page(1);
}

void ScreenCheck::on_pushButton_8_released()
{
    if (HDevWindowStack::IsOpen())
        CloseWindow(HDevWindowStack::Pop());
    this->ui->preview->show();
    this->ui->image->hide();
    this->ui->stackedWidget->setCurrentIndex(0);
}

void ScreenCheck::setSerial(QSerialPort *serial_)
{
    this->serial = serial_;
}

void ScreenCheck::setCamera(HKCamera *camera_)
{
    this->camera = camera_;
}

void ScreenCheck::serial_send_start()
{
     unsigned char send_buff[6];
     send_buff[0] = 0x55;
     send_buff[1] = 0x01;
     send_buff[2] = 0x01;
     send_buff[3] = 0x00;
     send_buff[4] = 0x41;
     send_buff[5] = 0xB8;
     serial->write((char *)send_buff,6);

}

void ScreenCheck::serial_send_end()
{
    unsigned char send_buff[6];//结束测试
    send_buff[0] = 0x55;
    send_buff[1] = 0xFF;
    send_buff[2] = 0x00;
    send_buff[3] = 0x00;
    send_buff[4] = 0x21;
    send_buff[5] = 0xD8;
    serial->write((char *)send_buff,6);
    id=1;
}

void ScreenCheck::serial_send_change_image()
{
    unsigned char send_buff[6];//切换图片
    unsigned short int crc_date;
    send_buff[0] = 0x55;
    send_buff[1] = 0x03;
    send_buff[2] = 0x01;
    send_buff[3] = id;
    crc_date=CRC16(send_buff,4);
    send_buff[4] = (unsigned char)(crc_date&0XFF);
    send_buff[5] = (unsigned char)(crc_date>>8);
    serial->write((char *)send_buff,6);
    id++;
}

QLabel *ScreenCheck::camera_label()
{
    return this->ui->preview;
}


void ScreenCheck::on_start_check_released()
{

    if (MV_OK != camera->startCollect())
        return;
    if (MV_OK != camera->collectFrame(this->ui->preview))
        return;
    this->ui->preview->hide();
    this->ui->image->show();
    HObject image = camera->getImage();
    DefectsDetect detect;
    HTuple hv_WindowID;
    Hlong winID=(Hlong)this->ui->image->winId();
    bool res = detect.run(image,this->ui->image->width(),this->ui->image->height(),winID,0,0);
    if (res){
        this->ui->label_4->setText(tr("合格"));
        this->ui->label_5->setStyleSheet("image: url(:/image/合格.png);");
    }
    else{
        this->ui->label_4->setText(tr("\344\270\215\345\220\210\346\240\274"));
        this->ui->label_5->setStyleSheet("image: url(:/image/\344\270\215\345\220\210\346\240\274.png);");
    }
    this->ui->stackedWidget->setCurrentIndex(1);
}

void ScreenCheck::on_lcd_out_clicked(bool checked)
{
    if (checked){
        this->serial_send_start();
        this->ui->lcd_out->setText("LCD关闭");
        this->ui->lcd_out->setChecked(true);
        this->ui->lcd_change_image->setEnabled(true);
    }
    else {
        this->serial_send_end();
        this->ui->lcd_out->setText("LCD输出");
        this->ui->lcd_out->setChecked(false);
        this->ui->lcd_change_image->setEnabled(false);
    }
}

void ScreenCheck::on_lcd_change_image_released()
{
    if(id == 6)
        {
            id = 0x01;
            this->ui->lcd_out->setText("LCD输出");
            this->ui->lcd_out->setChecked(false);
            this->ui->lcd_change_image->setEnabled(false);
            return;
        }
    this->serial_send_change_image();
}
